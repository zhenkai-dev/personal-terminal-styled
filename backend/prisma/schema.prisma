// Prisma schema for Personal Terminal Backend
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(uuid())
  sessionId       String             @unique @map("session_id")
  nickname        String?
  ipAddress       String?            @map("ip_address")
  userAgent       String?            @map("user_agent") @db.Text
  firstVisitAt    DateTime           @default(now()) @map("first_visit_at")
  lastVisitAt     DateTime           @default(now()) @updatedAt @map("last_visit_at")
  totalCommands   Int                @default(0) @map("total_commands")
  timezone        String?
  country         String?
  
  // Relations
  commandExecutions CommandExecution[]
  fileDownloads     FileDownload[]

  @@index([sessionId])
  @@index([lastVisitAt])
  @@map("users")
}

model Command {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  description  String    @db.Text
  category     String?
  responseType ResponseType @default(STATIC) @map("response_type")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  commandExecutions CommandExecution[]
  commandResponses  CommandResponse[]

  @@index([name])
  @@index([category])
  @@map("commands")
}

model CommandExecution {
  id             BigInt    @id @default(autoincrement())
  userId         String?   @map("user_id")
  commandName    String    @map("command_name")
  executionTime  DateTime  @default(now()) @map("execution_time")
  responseTimeMs Int?      @map("response_time_ms")
  ipAddress      String?   @map("ip_address")
  userAgent      String?   @map("user_agent") @db.Text
  success        Boolean   @default(true)
  errorMessage   String?   @map("error_message") @db.Text
  
  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  command Command  @relation(fields: [commandName], references: [name], onDelete: Cascade)

  @@index([userId])
  @@index([commandName])
  @@index([executionTime])
  @@index([success])
  @@map("command_executions")
}

model CommandResponse {
  id          Int      @id @default(autoincrement())
  commandName String   @map("command_name")
  version     Int      @default(1)
  content     String   @db.Text
  contentType String   @default("text/plain") @map("content_type")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  command Command @relation(fields: [commandName], references: [name], onDelete: Cascade)

  @@unique([commandName, version])
  @@index([commandName])
  @@index([isActive])
  @@map("command_responses")
}

model FileDownload {
  id           BigInt    @id @default(autoincrement())
  userId       String?   @map("user_id")
  fileName     String    @map("file_name")
  fileType     String    @map("file_type")
  downloadTime DateTime  @default(now()) @map("download_time")
  ipAddress    String?   @map("ip_address")
  userAgent    String?   @map("user_agent") @db.Text
  success      Boolean   @default(true)
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([fileType])
  @@index([downloadTime])
  @@map("file_downloads")
}

model AnalyticsDaily {
  date                DateTime @id
  uniqueVisitors      Int      @default(0) @map("unique_visitors")
  totalCommands       Int      @default(0) @map("total_commands")
  totalDownloads      Int      @default(0) @map("total_downloads")
  mostPopularCommand  String?  @map("most_popular_command")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([date])
  @@map("analytics_daily")
}

enum ResponseType {
  STATIC
  DYNAMIC
  FILE_DOWNLOAD
}